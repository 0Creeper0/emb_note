第七章	进程环境

1. 进程终止
	五种正常终止:
 		从main返回
 		调用exit
 		调用 _exit或 _Exit
 		最后一个线程从其启动例程返回
 		从最后一个线程调用pthread_exit
	三种错误终止:
 		调用abort
 		接到一个信号
 		最后一个线程对取消请求做出响应


2. 
	void exit(int status);
		结束进程并给父进程返回一个状态值并且所有atexit()注册的函数和on_exit()被调用
		status:
			0		正常退出
			其他	错误退出
			通常用EXIT_SUCCESS和EXIT_FAILURE
	
	void _exit (int status);
	void _Exit (int status);
		立即结束进程
	
	终止处理程序:

	int atexit(void (*function)(void));
		注册一些在程序正常结束时被调用的函数(终止处理程序)
		注: 调用时是注册时的反序

		返回值: 成功返回0, 失败非0

3. 每一个C程序都由一个C启动例程执行, 内核使程序执行的唯一方法是调用一个exec函数, 进程自愿终止的唯一方法是显式或隐式(通过调用exit)调用_exit或_Exit

4. 环境表
	每个程序都接收到一张环境表(一个字符指针数组, 其中每个字符串以NULL结尾)
	extern char **environ;

5. C程序的存储空间布局
	正文段(代码段)
		可以共享, 通常是只读的
	初始化数据段(数据段)
		存放已初始化的全局变量和静态变量,数据段属于静态内存分配
			如: int a = 0;
	未初始化数据段(bss段)
		程序开始执行之前, 内核将此段数据初始化为0或NULL
		存放未初始化的全局变量和静态变量
			如: int sum[100];
	栈
		由系统自动分配和释放, 存放函数的参数值.局部变量的值等
	堆
		由malloc()等函数申请, free()释放

6. 
	int setjmp(jmp_buf env);
		返回值:
			直接调用则返回0
			从longjmp调用则返回非0
	void longjmp(jmp_buf env, int val);

	实现跨函数跳转
	
第八章	进程控制

1. 进程标识(pid)
	pid_t getpid(void);		返回进程id
	pid_t getppid(void);	返回父进程id

2. 
	pid_t fork(void);
		功能: 
			创建一个新进程
			子进程是父进程的复制(包括缓冲区), 仅共享正文段
			注:
				父进程和子进程共享同一个文件偏移量
		返回值:
			子进程返回0
			父进程返回子进程id
			错误返回-1

	fork创建子进程和父进程有什么不同:
        <1>pid
        <2>ppid
        <3>资源占用率清空
        <4>flock(2)文件锁不继承
        用途:
                <1>网络模型
                <2>shell
3. 
	pid_t vfork(void);
		用于创建一个新进程, 子进程在调用exec或者exit前在父进程的空间中运行, 共享父进程的数据, vfork保证子进程先运行, 终止时必须调用_exit(因为不会刷新缓冲区)

    vfork(2) 与 fork(2)不同:
        <1>vfork(2)创建的子进程会阻塞父进程
        <2>共享存储空间


4. 
	pid_t wait(int *wstatus);
		如果子进程已经终止并是僵尸进程, wait立即返回并取得该子进程状态, 否则使调用者阻塞, 指导一个子进程终止. 如果调用者阻塞并且有多个子进程, 则在某一个子进程终止时wait立即返回,并返回终止子进程的进程id
		返回值:
			成功返回进程id
			出错返回0或-1
	pid_t waitpid(pid_t pid, int *wstatus, int options);
		pid == -1	:	任一子进程(此时与wait()等效)收尸
		pid > 0		:	进程id与pid相等的子进程收尸
		pid == 0	: 	与调用进程在同一个进程组的任一子进程收尸
		pid < -1 	: 	组id等于pid绝对值的任一子进程收尸
		返回值:
			成功返回终止子进程的进程id
			出错返回0或-1
	

5. exec族函数
	int execl(const char *pathname. const char *arg, ... /* (char *) NULL */);
	int execlp(const char *file, const char *arg, ... /* (char  *) NULL */);
	int execle(const char *pathname, const char *arg, ... /*, (char *) NULL, char * const envp[] */);
	int execv(const char *pathname, char *const argv[]);
	int execvp(const char *file, char *const argv[]);
	int execvpe(const char *file, char *const argv[], char *const envp[]);

	需要指针数组的带v, 需要文件名的带p, 需要传环境变量数组的带e, 带l的都要传NULL
	返回值:
		错误-1
		成功不返回

6. 更改组id
	int setgid(git_t gid);
		有权限时可以设置实际组id, 有效组id
		返回值:
			成功返回0
			失败返回-1

第九章	进程关系

1. 进程组(一个或多个进程的集合)
	每个进程除了进程id还有一个进程组id, 进程组中各进程接受来自统一终端的各种信号, 每个进程组有唯一进程组id(正整数)
	pid_t getpgrp(void);
		返回值:	返回调用进程的进程组id
	pid_t getpgid(pid_t pid);
		当pid为0时返回调用进程的进程组id
		返回值:
			成功返回进程组id
			失败返回-1
	
	每个进程组有一个组长进程, 组长进程的进程组id等于他的进程id

	int setpgid(pid_t pid, pid_t pgid);
		可以加入一个现有进程组或者创建一个新进程组
		将pid的进程组id设置成pgid, 两个数相等则pid变成进程组组长, 如果pid为0则使用调用者进程id
		返回值:
			成功返回0
			失败返回-1

2. 会话(一个或多个进程组的集合)
	pid_t setsid(void);
		如果调用进程不是组长进程, 则创建一个新会话, 改进程变成新会话首进程, 该进程成为一个组长进程, 该进程没有终端控制
	pid_t getsid(pid_t pid);
		pid为0返回调用进程的会话首进程的进程组id

第十章	信号

1. 信号是软件中断, 提供了一种处理异步事件的方法

2. 默认信号行为
	Term	停止进程
	Ign		忽略信号
	Core	停止进程并转储核心
	Stop	暂停进程
	Cont	如果正在停止就继续进程

3. 
	void (*signal(int sig, void (*func)(int)))(int);
		sig : 信号名
		func : 
			SIG_IGN 	忽略此信号
			SIG_DFL		默认动作
			函数地址	调用该函数(信号处理程序)

	typedef void (*sighandler_t)(int);

    sighandler_t signal(int signum, sighandler_t handler);
		返回值 : 返回改变之前的信号处理

4. 不可靠的信号
	信号可能丢失 (位图)
	信号会中断阻塞的系统调用
	信号的响应过程会嵌套
	信号处理函数中不能用setjmp和longjmp (每次mask置0, 跳转会错过置0, 而mask为1的信号不会响应)

	忽略信号方法:mask置一(signal()传SIG_IGN)
5. 可重入函数


6. 
	int kill(pid_t pid, int sig);
		pid > 0 	将信号发给进程id为pid的进程
		pid == 0 	将信号发给所在进程组的所有进程(必须有权限)
		pid == -1	将信号发给所有有权限向他们发信号的进程
		pid < -1	将信号发给进程组id等于pid绝对值并且有权限的所有进程
		sig : 信号
			当sig == 0时会检测指定进程是否存在

7. 
	unsigned int alarm(unsigned int seconds);
		返回0或以前设置闹钟时间剩余秒数
		每个进程只有一个闹钟时间
	
	int pause(void);
		会等待一个信号

8. 捕获异步事件的方式:
	通知法
	轮询法

9. 流量控制
	漏桶模型
		定量放行(如每秒固定放一个字节)

	令牌桶模型
		令牌(token)
		速率(cps)
		上限(burst)
		
		每次增加速率个令牌, 当有令牌时, 消耗令牌数量执行相应量任务, 没有再取

10. 信号集
	能表示多个信号的数据类型
	int sigemptyset(sigset_t *set);
		初始化set指向的信号集, 清除其中所有信号
		成功返回0
		失败返回-1
	int sigfillset(sigset_t *set);
		
		成功返回0
		失败返回-1

	int sigaddset(sigset_t *set, int signum);
		将一个信号添加到已有的信号集中
		成功返回0
		失败返回-1

	int sigdelset(sigset_t *set, int signum);
		从信号集中删除一个信号
		成功返回0
		失败返回-1

	int sigismember(const sigset_t *set, int signum);
		判断一个信号是不是在一个信号集中
		真返回1
		假返回0

11. 
	int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);
		oldset : 非空时当前信号屏蔽字通过oldset返回
		set : 非空时, how指示如何修改
			how选项:
				SIG_BLOCK		阻塞
				SIG_UNBLOCK		解除阻塞
				SIG_SETMASK		新的信号屏蔽时set指向的值

12. 
	int sigpending(sigset_t *set);
		通过set返回被阻塞或挂起的信号集合
		成功返回0
		失败返回-1

13. 
	int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);
		signum : 信号
		act	: 非空时则修改信号动作
		oldact : 返回该信号上一个动作

		struct sigaction
		{
			void     (*sa_handler)(int); // 信号处理函数
			void     (*sa_sigaction)(int, siginfo_t *, void *);	// 不和sa_handler同时用
			sigset_t   sa_mask;	// 设置信号集
			int        sa_flags; // 选项
			void     (*sa_restorer)(void);
		}
		返回值:
			成功返回0
			失败返回-1
		
第十一章	线程

线程可以理解为独立运行的函数

1. 线程标识
	pthread_t类型的结构
	int pthread_equal(pthread_t t1, pthread_t t2);
		比较两个线程id
		相等返回非0
		不相等返回0
	
	pthread_t pthread_self(void);
		获得自身线程id

2. 线程创建
	int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg);
		thread: 线程id
		attr:线程属性
		start_routine:线程任务函数
		arg:任务函数的参数

		成功返回0
		失败返回err置

3. 线程终止
	如果进程中任意线程调用了exit, _exit, _Exit, 整个进程就会终止
	单个线程终止:
		线程可以简单地从启动例程中返回, 返回值是线程的退出码
		线程可以被同一进程中的其他线程取消
		线程调用pthread_exit

	void pthread_exit(void *retval);

	int pthread_join(pthread_t thread, void **retval);
		线程的收尸函数(有多个线程时要收尸多次)
	int pthread_cancel(pthread_t thread);
		线程取消
		成功返回0
		失败返回错误编号
		
		线程取消可以安排线程清理处理程序
		void pthread_cleanup_push(void (*routine(void *), void *arg);
			routine 清理函数
			arg 参数
		void pthread_cleanup_pop(int execute);
			execute为0时清理函数将不被调用
			两函数必须成对出现因为是宏定义, push里面有{, pop里面有}
			函数执行情况:
				调用pthread_exit时
				响应取消请求时
				用非0execute参数调用时

4. 线程属性
	int pthread_detach(pthread_t thread);
		可以将线程设置成不可收尸的分离属性
		成功返回0
		失败返回err

5. 线程同步
	要用到锁机制
	初始化锁:
		pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
	
	加锁:
		int pthread_mutex_lock(pthread_mutex_t *mutex);
			成功返回0
			失败返回错误编号

			抢锁的时候会阻塞, 直到抢到了

	解锁:
		int pthread_mutex_unlock(pthread_mutex_t *mutex);
			成功返回0
			失败返回错误编号
	
	销毁:
		pthread_mutex_destroy();

	注意:避免出现死锁

	条件变量:
		pthread_cond_t
    	pthread_cond_init(3);
        pthread_cond_signal(3);
        pthread_cond_broadcast(3);
        pthread_cond_wait(3);
        pthread_cond_destroy(3);
	
	与信号:
        pthread_kill(3);
        pthread_sigwait(3);
        pthread_sigmask(3);


7. 多线程之间共享:
        全局内存(数据段, 代码段, 堆)
        进程id(pid)
        父进程id(ppid)
        进程组id和会话id(pgid, sid)
        控制终端(controlling terminal)
        用户和组id(uid, gid)
        文件描述符(open file descriptor)
        记录锁(record locks)
        信号处理(signal dispositions)
        文件权限屏蔽字(umask)
        工作目录和根目录
        计时器
        nice值(优先级, nice值越高优先级越低)
        资源限制(resource limits)
        CPU时间消耗
独立:
        栈
        线程id(pthread_t类型的结构)
        信号屏蔽字(signal mask)
        存放错误值的变量(err)
        实时调度

8. 线程池
	优点：
		1> 线程的创建和销毁的系统开销是比较大的, 如果应用线程池可以大大减少这样的开销
		2> 应用线程池后, 当有任务到来的时候, 如果线程池中有空闲线程就可以直接将任务分配给空闲线程, 这样可以提高任务的处理效率
	实现:
		

9. io
	与io:
    	pread(3); / pwrite(3);

第十三章	守护进程

1. 特征
	pid == pgid == sid
	不占用终端

2. 编程规则
	1> 调用umask()将屏蔽字设置一个已知值(通常是0)
*	2> 调用fork(), 然后使父进程exit(为了使子进程不是组长进程, 便于调用setsid创建新会话)
*	3> 调用setsid()创建一个新会话
	4> 打开/dev/null并使其有文件描述符0, 1, 2
	5> 关闭不再需要的文件描述符
	6> 更改工作目录为根目录

3. 日志
	产生日志方法:
		内核例程调用log函数
		调用syslog()函数

		void openlog(const char *ident, int  option,  int  facility);
(必须)	void syslog(int priority, const char *format, ...);
			priority	:	日志级别
			format		:	输出格式(不能加\n, 会显示成数字)
       	void closelog(void);

4. 单实例守护进程
	进程同时只能运行一次
	
	通过文件和记录锁机制(通常在/var/run/xxx.pid)
		int flock(int fd, int operation);
			operation :
				LOCK_SH		共享锁(多个进程)
				LOCK_EX		独占锁(单个进程)
				LOCK_UN		解锁
	
第十四章	高级io
非阻塞、io多路转接、记录锁、存储映射io
非阻塞:
        open(2);---->O_NONBLOCK
        fcntl(2); 
编程模型
        有限状态机
                现态--->条件--->次态
        推动状态机
io多路转接
        select(2);
                个数有限
                监视事件和返回事件在同一个集合
        poll(2);
                结构体
                监视事件和返回事件是不同变量
        epoll(7)
                仅限于linux
存储映射io:
        mmap(2);

第十五章	进程间通信

1. 管道
	匿名管道pipe--->有亲缘关系进程
	int pipe(int fd[2]);
		能创建一个管道, 通过fd返回两个文件描述符, fd[0]是读端, fd[1]是写端
		成功返回0
		失败返回-1
	命名管道fifo
	mkfifo(3);
2. xsi ipc (sysV):
	消息队列	信号量	共享内存
	ipcs
	ipcrm

	ftok(3);--->key_t
	key_t ftok(const char *pathname, int proj_id);
		将一个路径名(必须存在)和一个项目id变换为一个键
		成功返回键
		失败返回(key_t)-1

	xxxget();
	xxxop();
	xxxctl();

	massage queue
	share memery
	semphore array--->多进程访问临界区实现同步

第十六章	网络IPC:套接字

知识点:
	ip : IP地址就是给每个连接在互联网上的主机分配的一个32位地址,它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异
	
	mac	: 媒体访问控制，或称为物理地址、硬件地址，用来定义网络设备的位置
	
	port : 端口可分为虚拟端口和物理端口, 周知端口号是0到1024
	
	子网掩码 : 它是一种用来指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识的是主机的位掩码, 子网掩码只有一个作用，就是将某个IP地址划分成网络地址和主机地址两部分
	
	网关 : 网关是一种充当转换重任的计算机系统或设备, 网关在网络层以上实现网络互连
	
	路由 : 路由是指路由器从一个接口上收到数据包，根据数据包的目的地址进行定向并转发到另一个接口的过程
	
	ip地址划分 : 
		公有地址:
			A类地址范围：1.0.0.0 - 126.255.255.255，其中0和127作为特殊地址
			B类地址范围：128.0.0.0 - 191.255.255.255
			C类地址范围：192.0.0.0 - 223.255.255.255
			D类地址范围：224.0.0.0 - 239.255.255.255
			D类地址用于组播（也称为多播）的地址，无子网掩码
			E类地址范围：240.0.0.0 - 255.255.255.255
			255.255.255.255作为广播地址
		私有地址:
			A类地址：10.0.0.0～10.255.255.255 
			B类地址：172.16.0.0～172.31.255.255 
			C类地址：192.168.0.0～192.168.255.255
	
	osi七层网络模型 :
		应用层			应用程序
		表示层			格式化, 加密解密等
		会话层			应用间通信
		传输层			(数据包)
		网络层			网络地址 ip
		数据链路层		mac地址, 网卡等 以太网协议
		物理层			布线
	
	tcp/ip四层网络模型 :
		应用层
		传输层					tcp udp
		网际互联层（主机到主机）ip
		网络访问层

	tcp三次握手:
		
	tcp四次挥手:

	tcp和udp优缺点:
		TCP的优点： 可靠，稳定, 在数据传递时，有确认、窗口、重传、拥塞控制机制，在数据传完后，还会断开连接用来节约系统资源
		缺点: 慢，效率低，占用系统资源高，易被攻击, 因为TCP有确认机制、三次握手机制，这些也导致TCP容易被人利用

		UDP的优点： 快，比TCP稍安全
		UDP的缺点： 不可靠，不稳定

TCP与UDP区别总结：

1、TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接
2、TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付
3、TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流;UDP是面向报文的, UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）
4、每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信
5、TCP首部开销20字节;UDP的首部开销小，只有8个字节
6、TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠信道
